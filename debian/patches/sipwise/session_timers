--- a/core/plug-in/session_timer/SessionTimer.cpp
+++ b/core/plug-in/session_timer/SessionTimer.cpp
@@ -339,6 +339,9 @@ void SessionTimer::updateTimer(AmSession
 
 void SessionTimer::updateTimer(AmSession* s, const AmSipReply& reply) 
 {
+
+  DBG("+++++++++++ I'm here ++++++++++++++++++");
+
   if (!session_timer_conf.getEnableSessionTimer())
     return;
 
@@ -346,34 +349,49 @@ void SessionTimer::updateTimer(AmSession
   if (((reply.code < 200) || (reply.code >= 300)) &&
       (!(accept_501_reply && reply.code == 501)))
     return;
-  
-  // determine session interval
-  string sess_expires_hdr = getHeader(reply.hdrs, SIP_HDR_SESSION_EXPIRES,
+
+  remote_timer_aware =
+      key_in_list(getHeader(reply.hdrs, SIP_HDR_SUPPORTED, SIP_HDR_SUPPORTED_COMPACT),
+                  TIMER_OPTION_TAG);
+
+  if (!remote_timer_aware) {
+    // Timer NOT supported by B leg
+    DBG("+++++++++++ Remote header not included ++++++++++++++++++");
+    DBG("+++++++++++ Session Timer NOT supported by leg B, I will set a very high timer ++++++++++++++++++");
+    session_refresher = refresh_local;
+    session_refresher_role = UAC;
+    session_interval = 7200;
+
+  } else {
+    // Timer supported by B leg
+    // determine session interval
+    string sess_expires_hdr = getHeader(reply.hdrs, SIP_HDR_SESSION_EXPIRES,
 				      SIP_HDR_SESSION_EXPIRES_COMPACT, true);
 
-  session_refresher = refresh_local;
-  session_refresher_role = UAC;
+    session_refresher = refresh_local;
+    session_refresher_role = UAC;
   
-  if (!sess_expires_hdr.empty()) {
-    unsigned int sess_i_tmp = 0;
-    if (str2i(strip_header_params(sess_expires_hdr),
+    if (!sess_expires_hdr.empty()) {
+      unsigned int sess_i_tmp = 0;
+      if (str2i(strip_header_params(sess_expires_hdr),
 	      sess_i_tmp)) {
-      WARN("error while parsing " SIP_HDR_SESSION_EXPIRES " header value '%s'\n",
+        WARN("error while parsing " SIP_HDR_SESSION_EXPIRES " header value '%s'\n",
 	   strip_header_params(sess_expires_hdr).c_str()); // exception?
-    } else {
-      // this is forbidden by rfc, but to be sure against 'rogue' proxy/uas
-      if (sess_i_tmp < min_se) {
-	session_interval = min_se;
       } else {
-	session_interval = sess_i_tmp;
+        // this is forbidden by rfc, but to be sure against 'rogue' proxy/uas
+        if (sess_i_tmp < min_se) {
+	  session_interval = min_se;
+        } else {
+	  session_interval = sess_i_tmp;
+        }
       }
+      if (get_header_param(sess_expires_hdr, "refresher") == "uas") {
+        session_refresher = refresh_remote;
+        session_refresher_role = UAS;
+      } 
     }
-    if (get_header_param(sess_expires_hdr, "refresher") == "uas") {
-      session_refresher = refresh_remote;
-      session_refresher_role = UAS;
-    } 
   }
-  
+
   removeTimers(s);
   setTimers(s);
 }
